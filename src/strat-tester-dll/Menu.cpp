#include <std_include.hpp>
#include "includes.h"
#include "Menu.hpp"
#include <Windows.h>
#include <main.h>
#include "legacy_injection/builtins.h"

bool _openMenu = 0;
int page = 0x0;

struct menuPage
{
	std::string name;
	int index;
	int submenu;
	int previouss;
};

/*
data struct
int meele;
int interact;
int shoot;
int aim;
*/

/*
struct
// generated by Call of Duty, do not modify
unbindall
bind BUTTON_A "+gostand"
bind BUTTON_B "+stance"
bind BUTTON_X "+usereload"
bind BUTTON_Y "+weapnext_inventory"
bind2 BUTTON_Y "+switchseat"
bind BUTTON_LSHLDR "+smoke"
bind BUTTON_RSHLDR "+frag"
bind TAB "+scores"
bind BUTTON_START "togglemenu"
bind BUTTON_BACK "togglescores"
bind BUTTON_LSTICK "+breath_sprint"
bind BUTTON_RSTICK "+melee"
bind BUTTON_LTRIG "+speed_throw"
bind BUTTON_RTRIG "+attack"
bind DPAD_UP "+actionslot 1"
bind DPAD_DOWN "+actionslot 2"
bind DPAD_LEFT "+actionslot 3"
bind DPAD_RIGHT "+actionslot 4"
bind ESCAPE "togglemenu"
bind SPACE "+gostand"
bind 1 "+smoke"
bind 2 "+smoke"
bind 3 "+actionslot 4"
bind 4 "+actionslot 3"
bind A "+moveleft"
bind B "+talk"
bind D "+moveright"
bind E "+melee"
bind F "+activate"
bind G "+frag"
bind P "chatmodeparty"
bind Q "+weapnext_inventory"
bind R "+reload"
bind S "+back"
bind T "chatmodepublic"
bind V "+melee"
bind W "+forward"
bind X "+actionslot 4"
bind Y "chatmodeteam"
bind PAUSE "pause"
bind ALT "+actionslot 2"
bind CTRL "toggleprone"
bind SHIFT "+breath_sprint"
bind F9 "acceptLastGameInvite"
bind F10 "screenshotJpeg"
bind MOUSE1 "+attack"
bind MOUSE2 "+speed_throw"
bind MOUSE3 "+actionslot 1"
bind MOUSE5 "+stance"
bind MWHEELDOWN "weapprev"
bind MWHEELUP "+weapnext_inventory"
unbindallaxis
bindaxis A_LSTICK_X VA_SIDE MAP_SQUARED
bindaxis A_LSTICK_Y VA_FORWARD MAP_SQUARED
bindaxis A_RSTICK_X VA_YAW MAP_LINEAR
bindaxis A_RSTICK_Y VA_PITCH MAP_LINEAR

*/



std::vector<std::string> split(std::string s, std::string delimiter) {
	size_t pos_start = 0, pos_end, delim_len = delimiter.length();
	std::string token;
	std::vector<std::string> res;

	while ((pos_end = s.find(delimiter, pos_start)) != std::string::npos) {
		token = s.substr(pos_start, pos_end - pos_start);
		pos_start = pos_end + delim_len;
		res.push_back(token);
	}

	res.push_back(s.substr(pos_start));
	return res;
}

	std::map<std::string, int> getVKCodeMap()
	{
    // Add all VK key codes here
    std::map<std::string, int> vkMap = {
	{"MOUSE1", 0x01},
	{"MOUSE2", 0x01},
	{"0",0x30},
    {"1",0x31},
    {"2",0x32},
    {"3",0x33},
    {"4",0x34},
    {"5",0x35},
    {"6",0x36},
    {"7",0x37},
    {"8",0x38},
    {"9",0x39},
    {"A",0x41},
    {"B",0x42},
    {"C",0x43},
    {"D",0x44},
    {"E",0x45},
    {"F",0x46},
    {"G",0x47},
    {"H",0x48},
    {"I",0x49},
    {"J",0x4A},
    {"K",0x4B},
    {"L",0x4C},
    {"M",0x4D},
    {"N",0x4E},
    {"O",0x4F},
    {"P",0x50},
    {"Q",0x51},
    {"R",0x52},
    {"S",0x53},
    {"T",0x54},
    {"U",0x55},
    {"V",0x56},
    {"W",0x57},
    {"X",0x58},
    {"Y",0x59},
    {"Z",0x5A},
	{"ESCAPE",0x1B}
    };
    return vkMap;
}




int getVKCode(const std::string& key) {
    static std::map<std::string, int> vkMap = getVKCodeMap();
    auto it = vkMap.find(key);
    if (it != vkMap.end()) {
        return it->second;
    }
    return -1; // Return -1 if the key is not found
}



std::map<std::string, int> parseFile(const std::string& filename) {
    std::ifstream file(filename);
    std::string line;
	std::map<std::string, int> mapping;

	if(file.is_open())
	{
		printf("File found\n");
			std::string bind, key, action;
			size_t pos = 0;
		while (std::getline(file, line))
		{
			if (pos == 0 || pos == 1)
			{
				pos++;
				
			}
			else if (line == "unbindallaxis")
			{
				return mapping;
			}
			else
			{
				pos++;
				std::vector<std::string> s_input = split(line, " ");
				int vkCode = getVKCode(s_input[1]);
                if (vkCode != -1) {
                    mapping[s_input[2]] = vkCode;
                }
				s_input.clear();
			}
		}
		return mapping;
	}
	else
	{
		printf("File not found\n");
		return mapping;
	
	}
}

static menuPage s_page;

namespace StratTester
{
	void Update(int host, bool open)
	{
		_openMenu = open;
		
	}
	
	std::map<std::string, int> keybinds;
	std::once_flag f1;
	Menu::Menu()
	{
		/*Dev Note:
		*Sanity Check
		*check for map name if map is zm_frontend return
		*
		*Dev Note:
		*Function Add
		*get perks from gsc callback on entry
		* 
		* Dev Note:
		* New Menu Struct
		* Main = .submenu = 0
		* Weapons Menu = .submenu = 1
		* upgraded weapons = .submenu = 2
		* 
		*
		*
		*/

		
	}

	Menu::~Menu()
	{

	}

	void Menu::draw()
	{


	#define Switchmenu(x) s_page.previouss = s_page.index; s_page.index = x;
	#define Call(x) GSCBuiltins::pushUpdate((char*)x);
		if (GetAsyncKeyState(0x38/* key 8*/) & 0x8000)
		{
			_openMenu = 1;
		}

		

		if (_openMenu == 1)
		{
			std::call_once(f1, []()
			{
				keybinds = parseFile(".\\players\\bindings_0.cfg");
			});

			ImGuiIO& io = ImGui::GetIO();
			io.KeyMap[ImGuiKey_Space] = keybinds["\"+activate\""];
			
			if (GetAsyncKeyState(keybinds["\"togglemenu\""]) & 0x8000)
			{
				_openMenu = 0;
			}
			if (GetAsyncKeyState(keybinds["\"+melee\""]) & 0x8000)
			{
				s_page.index = s_page.previouss;
			}
			 

			switch (s_page.index)
			{
			case 0x0:
				ImGui::Begin("Strat Tester V2", 0, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);
				ImGui::SetWindowFocus();
				if (ImGui::Button("Basic Options", ImVec2(185, 20)))
				{

					Switchmenu(0x1)
				}
				if (ImGui::Button("Weapon Options", ImVec2(185, 20)))
				{
					Switchmenu(0x2)
				}
				if (ImGui::Button("Perk Options", ImVec2(185, 20)))
				{
					Switchmenu(0x3)
				}
				if (ImGui::Button("Points", ImVec2(185, 20)))
				{
					Switchmenu(0x4)
				}
				if (ImGui::Button("Round Options", ImVec2(185, 20)))
				{
					Switchmenu(0x5)
				}
				if (ImGui::Button("Drop Options", ImVec2(185, 20)))
				{
					Switchmenu(0x6)
				}
				/*Dev Note:
				* Function Add
				* Set the Text to the map name where the player is currently on
				*/
				if (ImGui::Button("Map Options", ImVec2(185, 20))) 
				{
					Switchmenu(0x7)
				}
				if (ImGui::Button("Presets *WIP*", ImVec2(185, 20)))
				{
					Switchmenu(0x8)
				}
				if (ImGui::Button("Debug Options", ImVec2(185, 20)))
				{
					Switchmenu(0x9)
				}

				ImGui::End();
				break;
			case 0x1:
				ImGui::Begin("Basic Options", 0, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);
				ImGui::SetWindowFocus();
				if (ImGui::Button("God Mode", ImVec2(185, 20)))
				{
					Call("[Basic]->[GodMode]")
				}
				if (ImGui::Button("Unlimited Ammo", ImVec2(185, 20)))
				{
					Call("[Basic]->[uAmmo]")
				}
				if (ImGui::Button("No Target", ImVec2(185, 20)))
				{
					Call("[Basic]->[NoTarget]")
				}

				ImGui::End();
				break;
			case 0x2:
				ImGui::Begin("Weapon Options", 0, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);
				ImGui::SetWindowFocus();
				if (ImGui::Button("Give Weapon", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Give Upgraded Weapon", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("AAT Menu", ImVec2(185, 20)))
				{

				}

				ImGui::End();
				break;
			case 0x3:
				ImGui::Begin("Perk Options", 0, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);
				ImGui::SetWindowFocus();
				if (ImGui::Button("Give All Perks", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Retain Perks", ImVec2(185, 20)))
				{

				}


				ImGui::End();
				break;
			case 0x4:
				ImGui::Begin("Points", 0, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);
				ImGui::SetWindowFocus();
				if (ImGui::Button("Give +1000", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Give +5000", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Give +10000", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Give +100000", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Give +1000000", ImVec2(185, 20)))
				{

				}

				if (ImGui::Button("Give -1000", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Give -5000", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Give -10000", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Give -100000", ImVec2(185, 20)))
				{

				}
				if (ImGui::Button("Give -1000000", ImVec2(185, 20)))
				{

				}
				ImGui::End();
				break;
			default:
				break;
			}
			

			
		}


	}


}